#version 430
layout(binding = 0, rgba32f) uniform image2D framebuffer;
layout (local_size_x = 8, local_size_y = 8) in;

uniform mat4 projection;
uniform mat4 view;

#define PI 3.1415926538

struct Sphere
{
    vec3 position;
    float radius;
    vec3 albedo;
    vec3 specular;
};

struct Ray
{
	vec3 origin;
	vec3 direction;
};

Ray CreateRay(vec3 origin, vec3 direction)
{
	Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

struct RayHit
{
    vec3 position;
    float distance;
    vec3 normal;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = vec3(0.0f, 0.0f, 0.0f);
    hit.distance = 100000;
    hit.normal = vec3(0.0f, 0.0f, 0.0f);
    return hit;
}

Ray CreateCameraRay(vec2 uv)
{
    // Transform the camera origin to world space
    vec3 origin = (view * vec4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    // Invert the perspective projection of the view-space position
    vec3 direction = (projection * vec4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = (view * vec4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere)
{
    // Calculate distance along the ray where the sphere is intersected
    vec3 d = ray.origin - sphere.position;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
    if (p2sqr < 0)
        return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.position);
    }
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
    // Calculate distance along the ray where the ground plane is intersected
    float t = -ray.origin.y / ray.direction.y;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = vec3(0.0f, 1.0f, 0.0f);
    }
}

vec3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < 100000)
    {
        // Return the normal
        return hit.normal * 0.5f + 0.5f;
    }
    else
    {
        // Sample the skybox and write it
        
        return vec3(0.1, 0.1, 0.1);
    }
}

RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();
    IntersectGroundPlane(ray, bestHit);
	Sphere s;
	s.position = vec3(0, 0, -1);
	s.radius = 1.0;
	//IntersectSphere(ray, bestHit, s);
    return bestHit;
}

void main() {
	vec4 pixel = vec4(0.1, 0.1, 0.1, 1.0);
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(framebuffer);
	vec2 uv = vec2((pixel_coords.xy + vec2(0.5f, 0.5f)) / size * 2.0f - 1.0f);
	
	//vec3 ray_o = vec3 (x * max_x, y * max_y, 0.0);                           
	//vec3 ray_d = vec3 (0.0, 0.0, -1.0);
	Ray ray = CreateCameraRay(uv);
	RayHit hit = Trace(ray);
	vec4 result = vec4(Shade(ray, hit), 1.0);
	imageStore(framebuffer, pixel_coords, result);
}